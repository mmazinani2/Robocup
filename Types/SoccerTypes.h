/************************************
Create by
Mohammad Mazinani
Mohammad Ali Kamkar
Mehdi Torshani
*************************************/
#ifndef _SOCCERTYPES_
#define _SOCCERTYPES_

#include "../Geometry/Geometry.h"

#define MAX_TEAMMATES          11
#define MAX_OPPONENTS          11
#define MAX_HETERO_PLAYERS     18
#define MAX_MSG              4096
#define MAX_SAY_MSG            10
#define MAX_TEAM_NAME_LENGTH   64
#define MAX_FLAGS              55
#define MAX_LINES               4
#define DEFAULT_TEAM_NAME     "Mars"
#define DEFAULT_OPPONENT_NAME "Unknown"
#define PITCH_LENGTH        105.0
#define PITCH_WIDTH          68.0
#define PITCH_MARGIN          5.0
#define PENALTY_AREA_LENGTH  16.5
#define PENALTY_AREA_WIDTH   40.32
#define PENALTY_X (PITCH_LENGTH/2.0-PENALTY_AREA_LENGTH)
#define QUALITY              10.0

typedef double AngDeg;
typedef int    Cycle;

enum CollisionT
{
	CLL_BALL,
	CLL_PLAYER,
	CLL_POST,
	CLL_NONE
};
/**
	in baraye moshakhas kardane vazuyate baziye 
**/
enum PlayerType 
{
	PLAYER_TEAMMATE,
	PLAYER_UNKNOWN_TEAMMATE,
	PLAYER_OPPONENT,
	PLAYER_UNKNOWN_OPPONENT,
	PLAYER_UNKNOWN,
	PLAYER_GOLA,
	PLAYER_NORMALL,
	PLAYER_ILLEGAL
};
/**
	in moshakhas mikone Ball daste kiye
**/
enum BallStatus 
{
	BALL_ILLEGAL,
	BALL_TEAMMATES,
	BALL_OPPONENTS
};
enum Command_Prabi 
{
	CP_BALL_ME,
	CP_BALL_OPP,
	CP_BALL_TEAM,
	CP_BALL_FREE,
	CP_PLAY_AGAIN,
	CP_FAST_PLAYER,
	
};
enum Server_Pram2 
{
	SP_AUDIO_CUT_DIST = 0,
	SP_AUTO_MODE,
	SP_BACK_PASSES, 
	SP_BALL_ACCEL_MAX,
	SP_BALL_DECAY,
	SP_BALL_RAND,
	SP_BALL_SIZE,
	SP_BALL_SPEED_MAX,
	SP_BALL_STUCK_AREA,
	SP_BALL_WEIGHT,
	SP_CATCH_BAN_CYCLE,
	SP_CATCH_PROBABILITY,
	SP_CATCHABLE_AREA_L,
	SP_CATCHABLE_AREA_W,
	SP_CKICK_MARGIN,
	SP_CLANG_ADVICE_WIN,
	SP_CLANG_DEFINE_WIN,
	SP_CLANG_DEL_WIN,
	SP_CLANG_INFO_WIN,
	SP_CLANG_MESS_DELAY,
	SP_CLANG_MESS_PER_CYCLE,
	SP_CLANG_META_WIN,
	SP_CLANG_RULE_WIN,
	SP_CLANG_WIN_SIZE,
	SP_COACH,
	SP_COACH_PORT,
	SP_COACH_W_REFEREE,
	SP_CONNECT_WAIT,
	SP_CONTROL_RADIUS,
	SP_DASH_POWER_RATE,
	SP_DROP_BALL_TIME,
	SP_EFFORT_DEC,
	SP_EFFORT_DEC_THR,
	SP_EFFORT_INC,
	SP_EFFORT_INC_THR,
	SP_EFFORT_INIT,
	SP_EFFORT_MIN,
	SP_EXTRA_STAMINA,
	SP_FORBID_KICK_OFF_OFFSIDE,
	SP_FREE_KICK_FAULTS,
	SP_FREEFORM_SEND_PERIOD,
	SP_FREEFORM_WAIT_PERIOD,
	SP_FULLSTATE_L,
	SP_FULLSTATE_R,
	SP_GAME_LOG_COMPRESSION,
	SP_GAME_LOG_DATED,
	SP_GAME_LOG_DIR,
	SP_GAME_LOG_FIXED,
	SP_GAME_LOG_FIXED_NAME,
	SP_GAME_LOG_VERSION,
	SP_GAME_LOGGING,
	SP_GAME_OVER_WAIT,
	SP_GOAL_WIDTH,
	SP_GOALIE_MAX_MOVES,
	SP_HALF_TIME,
	SP_HEAR_DECAY,
	SP_HEAR_INC,
	SP_HEAR_MAX,
	SP_INERTIA_MOMENT,
	SP_KEEPAWAY,
	SP_KEEPAWAY_LENGTH,
	SP_KEEPAWAY_LOG_DATED,
	SP_KEEPAWAY_LOG_DIR,
	SP_KEEPAWAY_LOG_FIXED,
	SP_KEEPAWAY_LOG_FIXED_NAME,
	SP_KEEPAWAY_LOGGING,
	SP_KEEPAWAY_START,
	SP_KEEPAWAY_WIDTH,
	SP_KICK_OFF_WAIT,
	SP_KICK_POWER_RATE,
	SP_KICK_RAND,
	SP_KICK_RAND_FACTOR_L,
	SP_KICK_RAND_FACTOR_R,
	SP_KICKABLE_MARGIN,
	SP_LANDMARK_FILE,
	SP_LOG_DATE_FORMAT,
	SP_LOG_TIMES,
	SP_MAX_BACK_TACKLE_POWER,
	SP_MAX_GOAL_KICKS,
	SP_MAX_TACKLE_POWER,
	SP_MAXMOMENT,
	SP_MAXNECKANG,
	SP_MAXNECKMOMENT,
	SP_MAXPOWER,
	SP_MINMOMENT,
	SP_MINNECKANG,
	SP_MINNECKMOMENT,
	SP_MINPOWER,
	SP_NR_EXTRA_HALFS,
	SP_NR_NORMAL_HALFS,
	SP_OFFSIDE_ACTIVE_AREA_SIZE,
	SP_OFFSIDE_KICK_MARGIN,
	SP_OLCOACH_PORT,
	SP_OLD_COACH_HEAR,
	SP_PEN_ALLOW_MULT_KICKS,
	SP_PEN_BEFORE_SETUP_WAIT,
	SP_PEN_COACH_MOVES_PLAYERS,
	SP_PEN_DIST_X,
	SP_PEN_MAX_EXTRA_KICKS,
	SP_PEN_MAX_GOALIE_DIST_X,
	SP_PEN_NR_KICKS,
	SP_PEN_RANDOM_WINNER,
	SP_PEN_READY_WAIT,
	SP_PEN_SETUP_WAIT,
	SP_PEN_TAKEN_WAIT,
	SP_PENALTY_SHOOT_OUTS,
	SP_PLAYER_ACCEL_MAX,
	SP_PLAYER_DECAY,
	SP_PLAYER_RAND,
	SP_PLAYER_SIZE,
	SP_PLAYER_SPEED_MAX,
	SP_PLAYER_SPEED_MAX_MIN,
	SP_PLAYER_WEIGHT,
	SP_POINT_TO_BAN,
	SP_POINT_TO_DURATION,
	SP_PORT,
	SP_PRAND_FACTOR_L,
	SP_PRAND_FACTOR_R,
	SP_PROFILE,
	SP_PROPER_GOAL_KICKS,
	SP_QUANTIZE_STEP,
	SP_QUANTIZE_STEP_L,
	SP_RECORD_MESSAGES,
	SP_RECOVER_DEC,
	SP_RECOVER_DEC_THR,
	SP_RECOVER_INIT,
	SP_RECOVER_MIN,
	SP_RECV_STEP,
	SP_SAY_COACH_CNT_MAX,
	SP_SAY_COACH_MSG_SIZE,
	SP_SAY_MSG_SIZE,
	SP_SEND_COMMS,
	SP_SEND_STEP,
	SP_SEND_VI_STEP,
	SP_SENSE_BODY_STEP,
	SP_SIMULATOR_STEP,
	SP_SLOW_DOWN_FACTOR,
	SP_SLOWNESS_ON_TOP_FOR_LEFT_TEAM,
	SP_SLOWNESS_ON_TOP_FOR_RIGHT_TEAM,
	SP_STAMINA_INC_MAX,
	SP_STAMINA_MAX,
	SP_START_GOAL_L,
	SP_START_GOAL_R,
	SP_STOPPED_BALL_VEL,
	SP_SYNCH_MICRO_SLEEP,
	SP_SYNCH_MODE,
	SP_SYNCH_OFFSET,
	SP_SYNCH_SEE_OFFSET,
	SP_TACKLE_BACK_DIST,
	SP_TACKLE_CYCLES,
	SP_TACKLE_DIST,
	SP_TACKLE_EXPONENT,
	SP_TACKLE_POWER_RATE,
	SP_TACKLE_WIDTH,
	SP_TEAM_ACTUATOR_NOISE,
	SP_TEAM_L_START,
	SP_TEAM_R_START,
	SP_TEXT_LOG_COMPRESSION,
	SP_TEXT_LOG_DATED,
	SP_TEXT_LOG_DIR,
	SP_TEXT_LOG_FIXED,
	SP_TEXT_LOG_FIXED_NAME,
	SP_TEXT_LOGGING,
	SP_USE_OFFSIDE,
	SP_VERBOSE,
	SP_VISIBLE_ANGLE,
	SP_VISIBLE_DISTANCE,
	SP_WIND_ANG,
	SP_WIND_DIR,
	SP_WIND_FORCE,
	SP_WIND_NONE,
	SP_WIND_RAND,
	SP_WIND_RANDOM
};
enum PlayerT 
{
	PT_MY_PLAYER_1 = 1,
  	PT_MY_PLAYER_2 = 2,
  	PT_MY_PLAYER_3 = 3,
  	PT_MY_PLAYER_4 = 4,
  	PT_MY_PLAYER_5 = 5,
  	PT_MY_PLAYER_6 = 6,
  	PT_MY_PLAYER_7 = 7,
  	PT_MY_PLAYER_8 = 8,
  	PT_MY_PLAYER_9 = 9,
  	PT_MY_PLAYER_10 = 10,
  	PT_MY_PLAYER_11 = 11,
	
	PT_OPPONENT_PLAYER_1 = 12,
  	PT_OPPONENT_PLAYER_2 = 13,
  	PT_OPPONENT_PLAYER_3 = 14,
  	PT_OPPONENT_PLAYER_4 = 15,
  	PT_OPPONENT_PLAYER_5 = 16,
  	PT_OPPONENT_PLAYER_6 = 17,
  	PT_OPPONENT_PLAYER_7 = 18,
  	PT_OPPONENT_PLAYER_8 = 19,
  	PT_OPPONENT_PLAYER_9 = 20,
  	PT_OPPONENT_PLAYER_10 = 21,
  	PT_OPPONENT_PLAYER_11 = 22,
	
	PT_TEAMMATES = 23,
	PT_OPPONENTS = 24,
	PT_UNKNOWN  = 25
};
enum ObjectType
{
	OBJ_FLAG,
	OBJ_LINE,
	OBJ_UNKNOWN
};
/**
	in bazikonaye mast
**/
enum MyPlayer
{
	MY_PLAYER_1 = 0,
  	MY_PLAYER_2,
  	MY_PLAYER_3,
  	MY_PLAYER_4,
  	MY_PLAYER_5,
  	MY_PLAYER_6,
  	MY_PLAYER_7,
  	MY_PLAYER_8,
  	MY_PLAYER_9,
  	MY_PLAYER_10,
  	MY_PLAYER_11,
	MY_PLAYER_GOALIE,
  	MY_PLAYER_UNKNOWN
};
/**
	in bazikonaye opponenets
**/
enum OpponentPlayer
{
	OPPONENT_PLAYER_1 = 0,
  	OPPONENT_PLAYER_2,
  	OPPONENT_PLAYER_3,
  	OPPONENT_PLAYER_4,
  	OPPONENT_PLAYER_5,
  	OPPONENT_PLAYER_6,
  	OPPONENT_PLAYER_7,
  	OPPONENT_PLAYER_8,
  	OPPONENT_PLAYER_9,
  	OPPONENT_PLAYER_10,
  	OPPONENT_PLAYER_11,
	OPPONENT_PLAYER_GOALIE,
  	OPPONENT_PLAYER_UNKNOWN
};
/**
	in parchamas
**/
enum Flag
{
	FT_GOAL_L = 0,
  	FT_GOAL_R,
  	FT_LINE_L,
  	FT_LINE_R,
  	FT_LINE_B,
  	FT_LINE_T,
	FT_FLAG_L_T,
  	FT_FLAG_T_L_50,
  	FT_FLAG_T_L_40,
  	FT_FLAG_T_L_30,
  	FT_FLAG_T_L_20,
  	FT_FLAG_T_L_10,
  	FT_FLAG_T_0,
  	FT_FLAG_C_T,
  	FT_FLAG_T_R_10,
  	FT_FLAG_T_R_20,
  	FT_FLAG_T_R_30,
  	FT_FLAG_T_R_40,
  	FT_FLAG_T_R_50,
  	FT_FLAG_R_T,
  	FT_FLAG_R_T_30,
  	FT_FLAG_R_T_20,
  	FT_FLAG_R_T_10,
  	FT_FLAG_G_R_T,
  	FT_FLAG_R_0,
  	FT_FLAG_G_R_B,
  	FT_FLAG_R_B_10,
  	FT_FLAG_R_B_20,
  	FT_FLAG_R_B_30,
  	FT_FLAG_R_B,
  	FT_FLAG_B_R_50,
  	FT_FLAG_B_R_40,
  	FT_FLAG_B_R_30,
  	FT_FLAG_B_R_20,
  	FT_FLAG_B_R_10,
  	FT_FLAG_C_B,
  	FT_FLAG_B_0,
  	FT_FLAG_B_L_10,
  	FT_FLAG_B_L_20,
  	FT_FLAG_B_L_30,
  	FT_FLAG_B_L_40,
  	FT_FLAG_B_L_50,
  	FT_FLAG_L_B,
  	FT_FLAG_L_B_30,
  	FT_FLAG_L_B_20,
  	FT_FLAG_L_B_10,
  	FT_FLAG_G_L_B,
  	FT_FLAG_L_0,
  	FT_FLAG_G_L_T,
  	FT_FLAG_L_T_10,
  	FT_FLAG_L_T_20,
  	FT_FLAG_L_T_30,
  	FT_FLAG_P_L_T,
  	FT_FLAG_P_L_C,
  	FT_FLAG_P_L_B,
  	FT_FLAG_P_R_T,
  	FT_FLAG_P_R_C,
  	FT_FLAG_P_R_B,
	FT_FLAG_C,
	FT_UNKNOWN
};
enum ObjectName
{
	OBJECT_BALL,
  	OBJECT_GOAL_L,
  	OBJECT_GOAL_R,
  	OBJECT_GOAL_UNKNOWN,
  	OBJECT_LINE_L,
  	OBJECT_LINE_R,
  	OBJECT_LINE_B,
  	OBJECT_LINE_T,
  	OBJECT_ILLEGAL,
  	OBJECT_MAX_OBJECTS
};
enum PlayModeT {
  PM_ILLEGAL = 0,
  PM_BEFORE_KICK_OFF,
  PM_KICK_OFF_LEFT,
  PM_KICK_OFF_RIGHT,
  PM_KICK_IN_LEFT,
  PM_KICK_IN_RIGHT,
  PM_CORNER_KICK_LEFT,
  PM_CORNER_KICK_RIGHT,
  PM_GOAL_KICK_LEFT,
  PM_GOAL_KICK_RIGHT,
  PM_GOAL_LEFT,
  PM_GOAL_RIGHT,
  PM_FREE_KICK_FAULT_LEFT,
  PM_FREE_KICK_FAULT_RIGHT,
  PM_FREE_KICK_LEFT,
  PM_FREE_KICK_RIGHT,
  PM_INDIRECT_FREE_KICK_RIGHT,
  PM_INDIRECT_FREE_KICK_LEFT,
  PM_BACK_PASS_LEFT,
  PM_BACK_PASS_RIGHT,
  PM_OFFSIDE_LEFT,
  PM_OFFSIDE_RIGHT,
  PM_PLAY_ON,
  PM_TIME_OVER,
  PM_PENALTY_SETUP_LEFT,
  PM_PENALTY_SETUP_RIGHT,
  PM_PENALTY_READY_LEFT,
  PM_PENALTY_READY_RIGHT,
  PM_PENALTY_TAKEN_LEFT,
  PM_PENALTY_TAKEN_RIGHT,
  PM_FROZEN,
  PM_QUIT
};
enum RefereeMessageT {
  REFC_ILLEGAL = 0,
  REFC_BEFORE_KICK_OFF = 1,
  REFC_KICK_OFF_LEFT  = 2,
  REFC_KICK_OFF_RIGHT  = 3,
  REFC_KICK_IN_LEFT  = 4,
  REFC_KICK_IN_RIGHT  = 5,
  REFC_CORNER_KICK_LEFT  = 6,
  REFC_CORNER_KICK_RIGHT  = 7,
  REFC_GOAL_KICK_LEFT  = 8,
  REFC_GOAL_KICK_RIGHT  = 9,
  REFC_FREE_KICK_LEFT  = 10,
  REFC_FREE_KICK_RIGHT  = 11,
  REFC_INDIRECT_FREE_KICK_RIGHT  = 12,
  REFC_INDIRECT_FREE_KICK_LEFT  = 13,
  REFC_FREE_KICK_FAULT_LEFT  = 14,
  REFC_FREE_KICK_FAULT_RIGHT  = 15,
  REFC_BACK_PASS_LEFT  = 16,
  REFC_BACK_PASS_RIGHT  = 17,
  REFC_PLAY_ON  = 18,
  REFC_TIME_OVER  = 19,
  REFC_FROZEN  = 20,
  REFC_QUIT  = 21,
  REFC_OFFSIDE_LEFT  = 22,
  REFC_OFFSIDE_RIGHT  = 23,
  REFC_HALF_TIME  = 24,
  REFC_TIME_UP  = 25,
  REFC_TIME_UP_WITHOUT_A_TEAM  = 26,
  REFC_TIME_EXTENDED  = 27,
  REFC_FOUL_LEFT  = 28,
  REFC_FOUL_RIGHT  = 29,
  REFC_GOAL_LEFT = 30,
  REFC_GOAL_RIGHT = 31,
  REFC_DROP_BALL = 32,
  REFC_GOALIE_CATCH_BALL_LEFT = 33,
  REFC_GOALIE_CATCH_BALL_RIGHT = 34,
  REFC_PENALTY_SETUP_LEFT = 35,
  REFC_PENALTY_SETUP_RIGHT = 36,
  REFC_PENALTY_READY_LEFT = 37,
  REFC_PENALTY_READY_RIGHT = 38,
  REFC_PENALTY_TAKEN_LEFT = 39,
  REFC_PENALTY_TAKEN_RIGHT = 40,
  REFC_PENALTY_MISS_LEFT = 41,
  REFC_PENALTY_MISS_RIGHT = 42,
  REFC_PENALTY_SCORE_LEFT = 43,
  REFC_PENALTY_SCORE_RIGHT = 44,
  REFC_PENALTY_FOUL_LEFT = 45,
  REFC_PENALTY_FOUL_RIGHT = 46,
  REFC_PENALTY_ONFIELD_LEFT = 47,
  REFC_PENALTY_ONFIELD_RIGHT = 48,
  REFC_PENALTY_WINNER_LEFT = 49,
  REFC_PENALTY_WINNER_RIGHT = 50,
  REFC_PENALTY_DRAW = 51,
  
  REFC_YELLOW_CARD_R_1 = 52,
  REFC_YELLOW_CARD_R_2 = 53,
  REFC_YELLOW_CARD_R_3 = 54,
  REFC_YELLOW_CARD_R_4 = 55,
  REFC_YELLOW_CARD_R_5 = 56,
  REFC_YELLOW_CARD_R_6 = 57,
  REFC_YELLOW_CARD_R_7 = 58,
  REFC_YELLOW_CARD_R_8 = 59,
  REFC_YELLOW_CARD_R_9 = 60,
  REFC_YELLOW_CARD_R_10 = 61,
  REFC_YELLOW_CARD_R_11 = 62,
  
  REFC_YELLOW_CARD_L_1 = 63,
  REFC_YELLOW_CARD_L_2 = 64,
  REFC_YELLOW_CARD_L_3 = 65,
  REFC_YELLOW_CARD_L_4 = 66,
  REFC_YELLOW_CARD_L_5 = 67,
  REFC_YELLOW_CARD_L_6 = 68,
  REFC_YELLOW_CARD_L_7 = 69,
  REFC_YELLOW_CARD_L_8 = 70,
  REFC_YELLOW_CARD_L_9 = 71,
  REFC_YELLOW_CARD_L_10 = 72,
  REFC_YELLOW_CARD_L_11 = 73,
  
  REFC_RED_CARD_R_1 = 74,
  REFC_RED_CARD_R_2 = 75,
  REFC_RED_CARD_R_3 = 76,
  REFC_RED_CARD_R_4 = 77,
  REFC_RED_CARD_R_5 = 78,
  REFC_RED_CARD_R_6 = 79,
  REFC_RED_CARD_R_7 = 80,
  REFC_RED_CARD_R_8 = 81,
  REFC_RED_CARD_R_9 = 82,
  REFC_RED_CARD_R_10 = 83,
  REFC_RED_CARD_R_11 = 84,
  
  REFC_RED_CARD_L_1 = 85,
  REFC_RED_CARD_L_2 = 86,
  REFC_RED_CARD_L_3 = 87,
  REFC_RED_CARD_L_4 = 88,
  REFC_RED_CARD_L_5 = 89,
  REFC_RED_CARD_L_6 = 90,
  REFC_RED_CARD_L_7 = 91,
  REFC_RED_CARD_L_8 = 92,
  REFC_RED_CARD_L_9 = 93,
  REFC_RED_CARD_L_10 = 94,
  REFC_RED_CARD_L_11 = 95,
} ;
enum ViewAngleT  {
  VA_NARROW,
  VA_NORMAL,
  VA_WIDE,
  VA_ILLEGAL
};
enum Mode {
	NORMAL = 0,
	EXHAUST = 100,
};
enum ViewQualityT {
  VQ_HIGH,
  VQ_LOW,
  VQ_ILLEGAL
};
enum SideT {
  SIDE_LEFT = 0,
  SIDE_RIGHT,
  SIDE_ILLEGAL
} ;
enum CommandT {
  CMD_ILLEGAL,
  CMD_DASH,
  CMD_DASH_SIDE,
  CMD_TURN,
  CMD_TURNNECK,
  CMD_CHANGEVIEW,
  CMD_CATCH,
  CMD_KICK,
  CMD_MOVE,
  CMD_SENSEBODY,
  CMD_SAY,
  CMD_SYNCH_SEE,
  CMD_CHANGEPLAYER,
  CMD_ATTENTIONTO,
  CMD_TACKLE,
  CMD_POINTTO,
  CMD_BYE,
  CMD_INIT,
  CMD_RECONNECT,
  CMD_MAX_COMMANDS
} ;
enum Card {
    CARD_NONE,
    CARD_YELLOW,
    CARD_RED
};
struct ObjectPlayer
{
	PlayerT player_Type;
	Vector2D RealPosition;
	double Angel;
	double Speed;
	double NeckAng;
	double BodyAng;
};
struct Ball
{
	BallStatus BS;
	Vector2D   BallPos;
};
struct ObjectFlag
{
	Flag       fl;
	Vector2D   flPos;
	bool operator>(const ObjectFlag &ObjFlag)  const
			{return (fl > ObjFlag.fl);}
	bool operator==(const ObjectFlag &ObjFlag)  const
			{return (fl == ObjFlag.fl);}
};
struct _MapValue {
       double PAR1; 
       double PAR2;  
       bool operator!() 
			{return !((PAR1 == -1000&&PAR2==-1000));}
};
struct ObjectStamina
{
	double Stamina;
	double Effort;
	double Recovery;
public:
	ObjectStamina():Stamina ( 0.00 )
			   ,Effort  ( 0.00 )
		 	   ,Recovery( 0.00 )

	{
	}

};

#endif
